import asyncio
import json
import os
from typing import Dict, List, Any, Optional

# --- Aiogram ---
from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
# --- Telethon ---
from telethon import TelegramClient, events
from telethon.errors.rpcerrorlist import SessionPasswordNeededError, PhoneCodeInvalidError, FloodWaitError

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
API_ID = 12345678  # –í–∞—à API ID —Å my.telegram.org
API_HASH = 'u_api_hash'  # –í–∞—à API HASH —Å my.telegram.org
BOT_TOKEN = 'TOKEN'  # –¢–æ–∫–µ–Ω –æ—Ç @BotFather
ADMIN_ID = 12344535231  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ—Ç

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TARGET_BOT_USERNAME = '@tvoianon_bot'
DIALOG_LIMIT = 50  # –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ª–∏–º–∏—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–∞ –æ–¥–Ω—É —Å–µ—Å—Å–∏—é
DATA_DIR = "bot_data"
SESSIONS_DIR = os.path.join(DATA_DIR, "sessions")
DATA_FILE = os.path.join(DATA_DIR, "config.json")

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∑–∞–¥–∞—á
telethon_clients: Dict[str, TelegramClient] = {}
spam_tasks: Dict[str, asyncio.Task] = {}
orchestrator_task: Optional[asyncio.Task] = None
orchestrator_lock = asyncio.Lock()
dialog_lock = asyncio.Lock()


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ (–∑–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ) ---
def load_data() -> Dict[str, Any]:
    if not os.path.exists(DATA_FILE): return {"sessions": {}, "messages": {}}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return {"sessions": {}, "messages": {}}


def save_data(data: Dict[str, Any]):
    with open(DATA_FILE, 'w', encoding='utf-8') as f: json.dump(data, f, indent=4, ensure_ascii=False)


# --- FSM –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è Aiogram ---
class SessionStates(StatesGroup):
    enter_phone, enter_code, enter_password = State(), State(), State()


class MessageStates(StatesGroup):
    set_messages = State()
    set_all_messages = State()


# --- –õ–æ–≥–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞ Telethon (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø) ---
async def spam_worker(client: TelegramClient, session_name: str, messages_config: List[Dict[str, Any]]):
    done_event = asyncio.Event()
    script_lock = asyncio.Lock()

    @client.on(events.NewMessage(from_users=TARGET_BOT_USERNAME, incoming=True))
    async def message_handler(event: events.NewMessage.Event):
        nonlocal dialog_count, is_chatting

        text = event.raw_text
        text_lower = text.lower()
        print(f"[{session_name}] –ü–æ–ª—É—á–µ–Ω–æ: '{text[:80].replace(os.linesep, ' ')}...'")

        if text.startswith("üòà –í–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ –æ–±—â–∞—é—Ç—Å—è"):
            print(f"[{session_name}] –ò–≥–Ω–æ—Ä–∏—Ä—É—é —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        if "–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –∑–∞ —Å—É—Ç–∫–∏" in text_lower:
            print(f"[{session_name}] –ü–æ–ª—É—á–µ–Ω —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –æ—Ç –±–æ—Ç–∞. –ó–∞–≤–µ—Ä—à–∞—é —Å–µ—Å—Å–∏—é.")
            done_event.set()
            return

        end_dialog_phrases = ["—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª –¥–∏–∞–ª–æ–≥", "–≤—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –¥–∏–∞–ª–æ–≥", "–ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"]
        if any(phrase in text_lower for phrase in end_dialog_phrases):
            if is_chatting:
                print(f"[{session_name}] –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—â—É —Å–ª–µ–¥—É—é—â–µ–≥–æ...")
                is_chatting = False
                await asyncio.sleep(1)
                await client.send_message(TARGET_BOT_USERNAME, '/next')
            return

        if "—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω" in text_lower and not is_chatting:
            async with script_lock:
                if is_chatting:
                    return

                is_chatting = True
                dialog_count += 1
                print(f"[{session_name}] –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω (–î–∏–∞–ª–æ–≥ #{dialog_count}). –û—Ç–ø—Ä–∞–≤–ª—è—é —Å—Ü–µ–Ω–∞—Ä–∏–π...")

                try:
                    for msg_data in messages_config:
                        await asyncio.sleep(msg_data['delay'])
                        if not is_chatting:
                            print(f"[{session_name}] –°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–µ—Ä–≤–∞–Ω, –¥–∏–∞–ª–æ–≥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.")
                            break
                        await event.respond(msg_data['text'])
                        print(f"[{session_name}] > '{msg_data['text']}'")

                    if is_chatting:
                        print(f"[{session_name}] –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {dialog_count}/{DIALOG_LIMIT}.")
                        await asyncio.sleep(1)
                        await event.respond('/stop')

                except Exception as e:
                    print(f"[{session_name}] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}.")
                    is_chatting = False
                    await event.respond('/next')

                finally:
                    if dialog_count >= DIALOG_LIMIT:
                        print(f"[{session_name}] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–∞—à –ª–∏–º–∏—Ç –≤ {DIALOG_LIMIT} –¥–∏–∞–ª–æ–≥–æ–≤.")
                        done_event.set()

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞ ---
    try:
        if not client.is_connected(): await client.connect()
        if not await client.is_user_authorized():
            print(f"[{session_name}] –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞, –≤–æ—Ä–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return

        dialog_count = 0
        is_chatting = False

        print(f"[{session_name}] –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é /stop –∏ /next –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        await client.send_message(TARGET_BOT_USERNAME, '/stop')
        await asyncio.sleep(2)
        await client.send_message(TARGET_BOT_USERNAME, '/next')

        await done_event.wait()

    except Exception as e:
        print(f"[{session_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
    finally:
        if client.is_connected():
            client.remove_event_handler(message_handler)
        print(f"[{session_name}] –í–æ—Ä–∫–µ—Ä –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# --- –õ–æ–≥–∏–∫–∞ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
async def session_orchestrator(chat_id: int, message_id: int):
    global orchestrator_task
    print("[–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä] –ó–∞–ø—É—â–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
    data = load_data()
    sessions_to_run = list(data.get("sessions", {}).keys())

    if not sessions_to_run:
        print("[–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä] –ù–µ—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        await bot.send_message(chat_id, "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
        return

    try:
        for session_name in sessions_to_run:
            print(f"\n========================================================")
            print(f"[–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä] --- –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É —Å —Å–µ—Å—Å–∏–µ–π: {session_name} ---")

            success = await _start_worker_task(session_name)
            if not success:
                print(f"[–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é {session_name}, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
                continue

            worker_task = spam_tasks.get(session_name)
            if worker_task:
                await worker_task

            print(f"[–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä] --- –°–µ—Å—Å–∏—è {session_name} –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É. –û—á–∏—â–∞—é —Ä–µ—Å—É—Ä—Å—ã. ---")
            await _stop_worker_task(session_name)
            print(f"========================================================\n")

        print("[–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä] üéâ –í—Å–µ —Å–µ—Å—Å–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏.")

    except asyncio.CancelledError:
        print("[–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä] üõë –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    finally:
        orchestrator_task = None
        spam_tasks.clear()
        print("[–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä] –ó–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
        try:
            await bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=get_main_control_keyboard()
            )
        except TelegramBadRequest:
            pass
        except Exception as e:
            print(f"[–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
async def _start_worker_task(session_name: str) -> bool:
    data = load_data()
    messages_config = data.get("messages", {}).get(session_name)
    if not messages_config:
        print(f"[{session_name}] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return False

    try:
        session_path = os.path.join(SESSIONS_DIR, f"{session_name}.session")
        client = TelegramClient(session_path, API_ID, API_HASH)
        await client.connect()

        if not await client.is_user_authorized():
            print(f"[{session_name}] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: —Å–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞.")
            await client.disconnect()
            return False

        telethon_clients[session_name] = client
        worker_task = asyncio.create_task(spam_worker(client, session_name, messages_config))
        spam_tasks[session_name] = worker_task
        return True
    except Exception as e:
        print(f"[{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Ä–∫–µ—Ä–∞: {e}")
        return False


async def _stop_worker_task(session_name: str):
    print(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}...")
    task = spam_tasks.pop(session_name, None)
    if task and not task.done():
        task.cancel()
        try:
            await asyncio.wait_for(task, timeout=3.0)
        except (asyncio.CancelledError, asyncio.TimeoutError):
            pass

    client = telethon_clients.pop(session_name, None)
    if client and client.is_connected():
        await client.disconnect()

    print(f"–†–µ—Å—É—Ä—Å—ã –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name} –æ—á–∏—â–µ–Ω—ã.")


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_control_keyboard() -> InlineKeyboardMarkup:
    is_running = orchestrator_task is not None and not orchestrator_task.done()
    start_stop_button = InlineKeyboardButton(text="‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å",
                                             callback_data="stop_orchestrator") if is_running else InlineKeyboardButton(
        text="‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="start_orchestrator")
    return InlineKeyboardMarkup(inline_keyboard=[[start_stop_button], [
        InlineKeyboardButton(text="üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏", callback_data="manage_sessions")]])


def get_sessions_keyboard() -> InlineKeyboardMarkup:
    data = load_data()
    sessions = data.get("sessions", {}).keys()
    active_session = next((name for name, task in spam_tasks.items() if not task.done()), None)

    buttons = []
    if sessions:
        for name in sessions:
            status_emoji = "üü¢" if name == active_session else "üî¥"
            buttons.append([InlineKeyboardButton(text=f"{status_emoji} {name}", callback_data=f"session_menu_{name}")])

    buttons.append([InlineKeyboardButton(text="üìù –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–æ –≤—Å–µ–º", callback_data="apply_to_all")])
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é", callback_data="add_session")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_session_menu_keyboard(session_name: str) -> InlineKeyboardMarkup:
    is_orchestrator_running = (orchestrator_task is not None and not orchestrator_task.done())

    active_spam_task = spam_tasks.get(session_name)
    is_this_session_running = (active_spam_task is not None and not active_spam_task.done())

    is_any_other_task_running = any(
        task for name, task in spam_tasks.items() if name != session_name and not task.done())
    is_any_process_running = is_orchestrator_running or is_this_session_running or is_any_other_task_running

    buttons = []

    if is_this_session_running:
        buttons.append(
            [InlineKeyboardButton(text="‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é", callback_data=f"stop_single_{session_name}")])
    elif not is_any_process_running:
        buttons.append(
            [InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é", callback_data=f"start_single_{session_name}")])

    buttons.extend([
        [InlineKeyboardButton(text="üí¨ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f"setup_msg_{session_name}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data=f"delete_session_{session_name}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–µ—Å—Å–∏–π", callback_data="manage_sessions")]
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
async def show_main_menu(message: Message, edit: bool = False):
    text = "üëã –ü—Ä–∏–≤–µ—Ç!\n\n–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–æ–π.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–µ—Å—Å–∏–π."
    markup = get_main_control_keyboard()
    try:
        if edit:
            await message.edit_text(text, reply_markup=markup)
        else:
            await message.answer(text, reply_markup=markup)
    except TelegramBadRequest:
        pass


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Aiogram ---
@router.message(CommandStart())
async def handle_start_cmd(message: Message):
    if message.from_user.id != ADMIN_ID: return
    await show_main_menu(message)


@router.callback_query(F.data == "main_menu")
async def handle_main_menu_cb(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    await show_main_menu(callback.message, edit=True)
    await callback.answer()


@router.callback_query(F.data == "manage_sessions")
async def cb_manage_sessions(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    await state.clear()
    try:
        await callback.message.edit_text(
            "üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–æ –≤—Å–µ–º. üü¢ - –∞–∫—Ç–∏–≤–Ω–∞.",
            reply_markup=get_sessions_keyboard()
        )
    except TelegramBadRequest:
        pass
    await callback.answer()


# --- –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
@router.callback_query(F.data == "add_session")
async def cb_add_session(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    await state.set_state(SessionStates.enter_phone)
    try:
        await callback.message.edit_text(
            "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n*(–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789)*")
    except TelegramBadRequest:
        pass
    await callback.answer()


@router.message(SessionStates.enter_phone)
async def process_phone(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID: return
    phone = message.text
    session_path = os.path.join(SESSIONS_DIR, f"{phone}.session")
    client = TelegramClient(session_path, API_ID, API_HASH)
    try:
        await client.connect()
        if await client.is_user_authorized():
            data = load_data()
            data.setdefault("sessions", {})[phone] = "active"
            save_data(data)
            await message.answer(f"‚úÖ –°–µ—Å—Å–∏—è –¥–ª—è {phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!",
                                 reply_markup=get_sessions_keyboard())
            await state.clear()
            await client.disconnect()
            return

        sent_code = await client.send_code_request(phone)
        await state.update_data(phone=phone, hash=sent_code.phone_code_hash)
        await state.set_state(SessionStates.enter_code)
        telethon_clients[f"temp_{message.from_user.id}"] = client
        await message.answer("‚úâÔ∏è –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")

    except FloodWaitError as e:
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.seconds} —Å–µ–∫—É–Ω–¥.")
        await state.clear()
        if client.is_connected(): await client.disconnect()
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        if client.is_connected(): await client.disconnect()


@router.message(SessionStates.enter_code)
async def process_code(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID: return
    code = message.text
    user_data = await state.get_data()
    phone, code_hash = user_data['phone'], user_data['hash']
    client = telethon_clients.get(f"temp_{message.from_user.id}")
    try:
        await client.sign_in(phone, code, phone_code_hash=code_hash)
        data = load_data()
        data.setdefault("sessions", {})[phone] = "active"
        save_data(data)
        await message.answer(f"‚úÖ –°–µ—Å—Å–∏—è –¥–ª—è {phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_sessions_keyboard())
        await state.clear()
    except SessionPasswordNeededError:
        await state.set_state(SessionStates.enter_password)
        await message.answer(
            "üîë –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å (–æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å):")
    except PhoneCodeInvalidError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∑–∞–Ω–æ–≤–æ.",
                             reply_markup=get_sessions_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}", reply_markup=get_sessions_keyboard())
        await state.clear()
    finally:
        if await state.get_state() != SessionStates.enter_password:
            if client and client.is_connected(): await client.disconnect()
            if f"temp_{message.from_user.id}" in telethon_clients: del telethon_clients[f"temp_{message.from_user.id}"]


@router.message(SessionStates.enter_password)
async def process_password(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID: return
    password = message.text
    user_data = await state.get_data()
    phone = user_data['phone']
    client = telethon_clients.get(f"temp_{message.from_user.id}")
    try:
        await client.sign_in(password=password)
        data = load_data()
        data.setdefault("sessions", {})[phone] = "active"
        save_data(data)
        await message.answer(f"‚úÖ –°–µ—Å—Å–∏—è –¥–ª—è {phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_sessions_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}. –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞.",
                             reply_markup=get_sessions_keyboard())
    finally:
        if client and client.is_connected(): await client.disconnect()
        if f"temp_{message.from_user.id}" in telethon_clients: del telethon_clients[f"temp_{message.from_user.id}"]
        await state.clear()


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ---
@router.callback_query(F.data.startswith("session_menu_"))
async def cb_session_menu(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    session_name = callback.data.split("_")[-1]
    try:
        await callback.message.edit_text(f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–µ–π: <b>{session_name}</b>",
                                         reply_markup=get_session_menu_keyboard(session_name))
    except TelegramBadRequest:
        pass
    await callback.answer()


@router.callback_query(F.data.startswith("delete_session_"))
async def cb_delete_session(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    session_name = callback.data.split("_")[-1]
    is_any_task_running = (orchestrator_task is not None and not orchestrator_task.done()) or any(
        t for t in spam_tasks.values() if not t.done())
    if is_any_task_running:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.", show_alert=True)
        return

    data = load_data()
    if session_name in data["sessions"]: del data["sessions"][session_name]
    if session_name in data.get("messages", {}): del data["messages"][session_name]
    save_data(data)
    session_file = os.path.join(SESSIONS_DIR, f"{session_name}.session")
    if os.path.exists(session_file): os.remove(session_file)
    await callback.answer("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    await cb_manage_sessions(callback, state)


@router.callback_query(F.data.startswith("setup_msg_"))
async def cb_setup_messages(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    session_name = callback.data.split("_")[-1]
    await state.update_data(session_name=session_name)
    await state.set_state(MessageStates.set_messages)
    data = load_data()
    messages_list = data.get("messages", {}).get(session_name, [])
    current_messages_text = "\n".join(f"‚Ä¢ {msg['delay']} —Å–µ–∫. ‚Äî ¬´{msg['text']}¬ª" for msg in
                                      messages_list) if messages_list else "<i>(–ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)</i>"
    try:
        await callback.message.edit_text(
            f"üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {session_name}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–∑–∞–¥–µ—Ä–∂–∫–∞ | –¢–µ–∫—Å—Ç`\n"
            f"<b>–¢–µ–∫—É—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π:</b>\n{current_messages_text}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"session_menu_{session_name}")]]))
    except TelegramBadRequest:
        pass


@router.message(MessageStates.set_messages)
async def process_messages_input(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID: return
    user_data = await state.get_data()
    session_name = user_data['session_name']
    lines, messages_config, errors = message.text.strip().split('\n'), [], []
    for i, line in enumerate(lines):
        parts = line.split('|', 1)
        if len(parts) != 2:
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {i + 1}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            continue
        try:
            delay, text = int(parts[0].strip()), parts[1].strip()
            if not text:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i + 1}: —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            else:
                messages_config.append({"delay": delay, "text": text})
        except ValueError:
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {i + 1}: –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    if errors:
        await message.answer("‚ùå –û—à–∏–±–∫–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏:\n- " + "\n- ".join(errors) + "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    data = load_data()
    data.setdefault("messages", {})[session_name] = messages_config
    save_data(data)
    await state.clear()
    await message.answer(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è <b>{session_name}</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
                         reply_markup=get_session_menu_keyboard(session_name))


# --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è –∫–æ –≤—Å–µ–º ---
@router.callback_query(F.data == "apply_to_all")
async def cb_apply_to_all(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    await state.set_state(MessageStates.set_all_messages)
    try:
        await callback.message.edit_text(
            "üìú –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–æ –≤—Å–µ–º\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫–æ –í–°–ï–ú —Å–µ—Å—Å–∏—è–º.\n"
            "–§–æ—Ä–º–∞—Ç:\n`–∑–∞–¥–µ—Ä–∂–∫–∞ | –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è 1`\n`–∑–∞–¥–µ—Ä–∂–∫–∞ | –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è 2`",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_sessions")]])
        )
    except TelegramBadRequest:
        pass
    await callback.answer()


@router.message(MessageStates.set_all_messages)
async def process_all_messages_input(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID: return
    lines, messages_config, errors = message.text.strip().split('\n'), [], []
    for i, line in enumerate(lines):
        parts = line.split('|', 1)
        if len(parts) != 2:
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {i + 1}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            continue
        try:
            delay, text = int(parts[0].strip()), parts[1].strip()
            if not text:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {i + 1}: —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            else:
                messages_config.append({"delay": delay, "text": text})
        except ValueError:
            errors.append(f"–°—Ç—Ä–æ–∫–∞ {i + 1}: –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    if errors:
        await message.answer("‚ùå –û—à–∏–±–∫–∏ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏:\n- " + "\n- ".join(errors) + "\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = load_data()
    session_names = list(data.get("sessions", {}).keys())
    if not session_names:
        await message.answer("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è.")
        await state.clear()
        return

    for session_name in session_names:
        data.setdefault("messages", {})[session_name] = messages_config
    save_data(data)
    await state.clear()
    await message.answer(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ {len(session_names)} —Å–µ—Å—Å–∏—è–º.",
                         reply_markup=get_sessions_keyboard())


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ ---
@router.callback_query(F.data == "start_orchestrator")
async def cb_start_orchestrator(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)

    async with orchestrator_lock:
        global orchestrator_task
        if any(t for t in spam_tasks.values() if not t.done()):
            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é.", show_alert=True)
            return
        if orchestrator_task is not None and not orchestrator_task.done():
            await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!", show_alert=True)
            return

        await callback.answer("‚úÖ –ó–∞–ø—É—Å–∫–∞—é –æ—á–µ—Ä–µ–¥—å —Å–µ—Å—Å–∏–π...", show_alert=True)
        orchestrator_task = asyncio.create_task(
            session_orchestrator(callback.message.chat.id, callback.message.message_id))
        try:
            await callback.message.edit_reply_markup(reply_markup=get_main_control_keyboard())
        except TelegramBadRequest:
            pass


@router.callback_query(F.data == "stop_orchestrator")
async def cb_stop_orchestrator(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    global orchestrator_task
    if orchestrator_task is not None and not orchestrator_task.done():
        await callback.answer("‚ùå –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ—á–µ—Ä–µ–¥—å...", show_alert=True)
        orchestrator_task.cancel()
        for task in list(spam_tasks.values()): task.cancel()
        orchestrator_task = None
        try:
            await callback.message.edit_reply_markup(reply_markup=get_main_control_keyboard())
        except TelegramBadRequest:
            pass
    else:
        await callback.answer("‚ùå –û—á–µ—Ä–µ–¥—å –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.", show_alert=True)


@router.callback_query(F.data.startswith("start_single_"))
async def cb_start_single_session(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    session_name = callback.data.split("_")[-1]
    is_any_task_running = (orchestrator_task is not None and not orchestrator_task.done()) or any(
        t for t in spam_tasks.values() if not t.done())
    if is_any_task_running:
        await callback.answer("‚ùå –î—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.", show_alert=True)
        return

    await callback.answer(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Å—Å–∏—é {session_name}...", show_alert=True)
    success = await _start_worker_task(session_name)
    if not success:
        await callback.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é {session_name}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.",
                              show_alert=True)

    try:
        await callback.message.edit_reply_markup(reply_markup=get_session_menu_keyboard(session_name))
    except TelegramBadRequest:
        pass


@router.callback_query(F.data.startswith("stop_single_"))
async def cb_stop_single_session(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID: return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    session_name = callback.data.split("_")[-1]
    await callback.answer(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–µ—Å—Å–∏—é {session_name}...", show_alert=True)
    await _stop_worker_task(session_name)
    try:
        await callback.message.edit_reply_markup(reply_markup=get_session_menu_keyboard(session_name))
    except TelegramBadRequest:
        pass


async def main():
    os.makedirs(DATA_DIR, exist_ok=True)
    os.makedirs(SESSIONS_DIR, exist_ok=True)
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
